// Code generated by MockGen. DO NOT EDIT.
// Source: src/registry/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=src/registry/interfaces.go -destination=src/utils/mocks.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	sql "database/sql"
	http "net/http"
	reflect "reflect"

	registry "github.com/carlosSimplicio/go-auth-api/src/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
	isgomock struct{}
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// SetupRoutes mocks base method.
func (m *MockController) SetupRoutes(handler *http.ServeMux) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupRoutes", handler)
}

// SetupRoutes indicates an expected call of SetupRoutes.
func (mr *MockControllerMockRecorder) SetupRoutes(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRoutes", reflect.TypeOf((*MockController)(nil).SetupRoutes), handler)
}

// MockIDbClient is a mock of IDbClient interface.
type MockIDbClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDbClientMockRecorder
	isgomock struct{}
}

// MockIDbClientMockRecorder is the mock recorder for MockIDbClient.
type MockIDbClientMockRecorder struct {
	mock *MockIDbClient
}

// NewMockIDbClient creates a new mock instance.
func NewMockIDbClient(ctrl *gomock.Controller) *MockIDbClient {
	mock := &MockIDbClient{ctrl: ctrl}
	mock.recorder = &MockIDbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDbClient) EXPECT() *MockIDbClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDbClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIDbClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDbClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockIDbClient) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockIDbClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIDbClient)(nil).Connect))
}

// Exec mocks base method.
func (m *MockIDbClient) Exec(query string, params ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockIDbClientMockRecorder) Exec(query any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIDbClient)(nil).Exec), varargs...)
}

// Select mocks base method.
func (m *MockIDbClient) Select(query string, params ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockIDbClientMockRecorder) Select(query any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockIDbClient)(nil).Select), varargs...)
}

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
	isgomock struct{}
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(user *registry.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockIUserRepository) GetUserByEmail(email string) (*registry.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*registry.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockIUserRepository) GetUserById(id int) (*registry.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*registry.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserRepositoryMockRecorder) GetUserById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserRepository)(nil).GetUserById), id)
}

// MockILoginService is a mock of ILoginService interface.
type MockILoginService struct {
	ctrl     *gomock.Controller
	recorder *MockILoginServiceMockRecorder
	isgomock struct{}
}

// MockILoginServiceMockRecorder is the mock recorder for MockILoginService.
type MockILoginServiceMockRecorder struct {
	mock *MockILoginService
}

// NewMockILoginService creates a new mock instance.
func NewMockILoginService(ctrl *gomock.Controller) *MockILoginService {
	mock := &MockILoginService{ctrl: ctrl}
	mock.recorder = &MockILoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginService) EXPECT() *MockILoginServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockILoginService) Login(body []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockILoginServiceMockRecorder) Login(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockILoginService)(nil).Login), body)
}

// MockISignUpService is a mock of ISignUpService interface.
type MockISignUpService struct {
	ctrl     *gomock.Controller
	recorder *MockISignUpServiceMockRecorder
	isgomock struct{}
}

// MockISignUpServiceMockRecorder is the mock recorder for MockISignUpService.
type MockISignUpServiceMockRecorder struct {
	mock *MockISignUpService
}

// NewMockISignUpService creates a new mock instance.
func NewMockISignUpService(ctrl *gomock.Controller) *MockISignUpService {
	mock := &MockISignUpService{ctrl: ctrl}
	mock.recorder = &MockISignUpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignUpService) EXPECT() *MockISignUpServiceMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockISignUpService) SignUp(body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockISignUpServiceMockRecorder) SignUp(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockISignUpService)(nil).SignUp), body)
}
